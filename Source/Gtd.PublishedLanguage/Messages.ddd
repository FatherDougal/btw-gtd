
// adding precise-enough time on Events eases the creation of "acivity list/facebook wall" types of views 
const time = DateTime TimeUtc;


extern "BTW2/GTD"
namespace Gtd

// RequestId allows client software to generate a GUID to pass as a correlation Id in the Commands it sends to server.
// The client can then check the server's views to see if the Id exists, and if so, can report that the request was received by server.
const requestId = Guid RequestId

// If a RequestId is provided by the client, that same Id will be assigned to the ProjectId/ActionId
// to ease correlation between a client's request and the associated Command and Event messages resulting from it.
// TODO: Consider adding unique integral (integer) number to these in the future to improve human lookup/UX/readability.
const projectId = ProjectId ProjectId
const actionId = ActionId ActionId


// TODO: Consider delegation?

// TrustedSystem contains a Person's instance of their single, trusted, "Getting Things Done" system
interface TrustedSystem(TrustedSystemId Id)
{
    if ? = Command, ITrustedSystemCommand
    if ! = Event, ITrustedSystemEvent

    // a creation/initialization/preparation Event like this is what all Aggregates tend to have
    // TODO: This method is not implemented yet because in E22 we are not writing executable code yet.
    TrustedSystemCreated!()
     
    // Captures an entry inside the inbox
    CaptureThought?(requestId, string thought)
        ThoughtCaptured!(Guid thoughtId, string thought, time)

    ArchiveThought?(Guid thoughtId)
        ThoughtArchived!(Guid thoughtId, time)
    
    DefineAction?(requestId, projectId, string outcome)
        ActionDefined!(actionId, projectId, string outcome, time)

    DefineProject?(requestId, string projectOutcome)
        ProjectDefined!(projectId, string projectOutcome, ProjectType type, time)

    DefineSingleActionProject?(requestId, Guid thoughtId)
        //TODO: for now I think it may be best to reuse the two events above instead of creating a new one
        // SingleActionProjectDefined!(projectId, string projectOutcome, ProjectType type, actionId, string actionOutcome, time)

    ChangeProjectType?(projectId, ProjectType type)
        ProjectTypeChanged!(projectId, ProjectType type, time)
    
    ActionAssignedToProject!(actionId, ProjectId newProject, time)
    ActionRemovedFromProject!(actionId, ProjectId oldProject, time)
    ActionMovedToProject!(actionId, ProjectId oldProject, ProjectId newProject, time)

    ArchiveAction?(actionId)    
        ActionArchived!(actionId, projectId, time)    

    CompleteAction?(actionId)
        ActionCompleted!(actionId, projectId, string actionOutcome, time)

    ChangeActionOutcome?(actionId, string outcome)
        ActionOutcomeChanged!(actionId, projectId, string actionOutcome, time)

    ChangeProjectOutcome?(projectId, string outcome)
        ProjectOutcomeChanged!(projectId, string projectOutcome, time)

    ChangeThoughtSubject?(Guid thoughtId, string subject)
        ThoughtSubjectChanged!(Guid thoughtId, string subject, time)

    // [abdullin]: We will add contexts later

}

