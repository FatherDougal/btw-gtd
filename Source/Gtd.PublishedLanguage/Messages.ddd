
// adding precise-enough time on Events eases the creation of "acivity list/facebook wall" types of views 
const time = DateTime TimeUtc;


extern "BTW2/GTD"
namespace Gtd

// RequestId allows client software to generate a GUID to pass as a correlation Id in the Commands it sends to server.
// The client can then check the server's views to see if the Id exists, and if so, can report that the request was received by server.
// If a RequestId is provided by the client, that same Id will be assigned to the ProjectId/ActionId
// to ease correlation between a client's request and the associated Command and Event messages resulting from it.

const requestId = RequestId RequestId

//[kstreet]
// I think a "thought" is just one of the many forms of "stuff"
// one could argue that all stuff that comes into the inbox is "stuff"
// and it doesn't get a more concrete Id until a human says what it really is
// "project", "action", "thought".
// I think all stuff should be stuff intil it is transformed to what it really is.
// That way all "stuff generators" use stuffIds and the code to convert to Action/Project etc.
// can assume it handles "stuffId" and not a "thoughtId" when the "stuff" is random email msg, etc.
const stuffId = StuffId StuffId
const thoughtId = ThoughtId ThoughtId

const projectId = ProjectId ProjectId
const actionId = ActionId ActionId

// TODO: Consider delegation?

// TrustedSystem contains a Person's instance of their single, trusted, "Getting Things Done" system
interface TrustedSystem(TrustedSystemId Id)
{
    if ? = Command, ITrustedSystemCommand
    if ! = Event, ITrustedSystemEvent

    // a creation/initialization/preparation Event like this is what all Aggregates tend to have
    // TODO: This method is not implemented yet because in E22 we are not writing executable code yet.
    TrustedSystemCreated!()
     
    // Captures an entry inside the inbox
    CaptureThought?(requestId, string thought)
        ThoughtCaptured!(thoughtId, string thought, time)

    ArchiveThought?(thoughtId)
        ThoughtArchived!(thoughtId, time)
    
    DefineAction?(requestId, projectId, string outcome)
        ActionDefined!(actionId, projectId, string outcome, time)

    DefineProject?(requestId, string projectOutcome)
        ProjectDefined!(projectId, string projectOutcome, ProjectType type, time)

    DefineSingleActionProject?(requestId, thoughtId)
        //TODO: for now I think it may be best to reuse the two events above instead of creating a new one
        // SingleActionProjectDefined!(projectId, string projectOutcome, ProjectType type, actionId, string actionOutcome, time)

    ChangeProjectType?(projectId, ProjectType type)
        ProjectTypeChanged!(projectId, ProjectType type, time)
    
    ActionAssignedToProject!(actionId, ProjectId newProject, time)
    ActionRemovedFromProject!(actionId, ProjectId oldProject, time)
    ActionMovedToProject!(actionId, ProjectId oldProject, ProjectId newProject, time)

    ArchiveAction?(actionId)    
        ActionArchived!(actionId, projectId, time)    

    CompleteAction?(actionId)
        ActionCompleted!(actionId, projectId, string actionOutcome, time)

    ChangeActionOutcome?(actionId, string outcome)
        ActionOutcomeChanged!(actionId, projectId, string actionOutcome, time)

    ChangeProjectOutcome?(projectId, string outcome)
        ProjectOutcomeChanged!(projectId, string projectOutcome, time)

    ChangeThoughtSubject?(thoughtId, string subject)
        ThoughtSubjectChanged!(thoughtId, string subject, time)

    
    // optional Date when project or action becomes available and relevant for us. 
    // we don't want to be bother about that action till then
    DeferActionUntil?(actionId, DateTime deferUntil)
        ActionDeferredUntil!(actionId, DateTime deferUntil)
        ActionDeferDateShifted!(actionId, DateTime oldDeferDate, DateTime newDeferDate)    
        ActionIsNoLongerDeferred!(actionId, DateTime oldDeferDate)

    // Date when project or action is past due
    // we want to be really reminded if we get close to that date
    ProvideDueDateForAction?(actionId, DateTime newDueDate)
        DueDateAssignedToAction!(actionId, DateTime newDueDate)
        ActionDueDateMoved!(actionId, DateTime oldDueDate, DateTime newDueDate)            
        DueDateRemovedFromAction!(actionId, DateTime oldDueDate)


    //MoveThoughtToSomedayMaybe?()
        //ThoughtMovedToSomedayMaybe!()

    // "GTD Tickler 'file' "
    // RemindMeAboutThought?(onDay, atTime, usingNotifyMethodof)
         //ReminderAddedFOrThought!()

    //MoveThoughtToReferenceSystem?()
        //ThoughtMovedToReferenceSystem!()


    // [abdullin]: We will add contexts later

    // [kstreet]:  7.22.2013
    // Playing around with some GTD language from the book.
    // Want to see what it feels like to use the UI when I conform very closely
    // to the English language that is used in the GTD book.
    // example - various "stuff generators" exist - not just thoughts in my head
    // I may use mutiple clients to get stuff into my trusted system
    // email inboxes, OneNote/Evernote, Phone audio, text messages, etc.
    // All is just "Stuff" in GTD lingo until it is processed into something more meaningful.
    // For now, use the existing "Inbox" concept to mean "the place all STUFF goes"
    // instead of "Collection Bucket" or "In-basket" used in book.
    //PutStuffInCollectionBucket?(requestId, string stuff)
    //    StuffPutInCollectionBucket!(stuffId, string stuff, time)

    PutStuffInInbox?(requestId, string stuff)
        StuffPutInInbox!(stuffId, string stuff, time)

    TrashStuff?(stuffId)
        StuffTrashed!(stuffId, time)

    // add these concepts later.
    // Current code is geared towards ACTIONABLE items only right now
    //PutStuffInSomedayMaybe?(stuffId, string stuff)
    //    StuffPutInSomedayMaybe!(stuffId, string stuff, time)
    //PutStuffInReferenceSystem?(stuffId, string stuff)
    //    StuffPutInReferenceSystem!(stuffId, string stuff, time)

}

interface ClientProfile()
{
    if ? = Command
        
    if ! = Event, IClientProfileEvent
    InitClientProfileIfNeeded?()

    ClientProfileSwitchedToTrustedSystem!(TrustedSystemId id)
}

